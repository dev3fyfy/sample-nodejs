name: Automate merge to branches
on:
  push:
    branches:
      - master

jobs:
  merge:
    runs-on: ubuntu-latest
    env:
      BRANCHES: "*"
      Member_ID_Slack: ""
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all history for all branches
          token: ${{ secrets.PERSONAL_TOKEN }}

      - name: Merge changes into other branches
        run: |
          git config user.name "dev3fyfy"
          git config user.email "dev.ahmed.afifi@gmail.com"
          conflicts_branches=""
          success_merge_braches=""
          up_to_date_braches=""
          PR_URL=""
          is_pull_request=false
          echo "REPOSITORY_NAME=$GITHUB_REPOSITORY" >> $GITHUB_ENV    
          IFS=',' read -ra BRANCHES <<< "${BRANCHES}"

          echo "$( git branch --list -a  --format='%(refname:short)'  "origin/${BRANCHES}" | sed "s/origin\///")" 
          echo  "${BRANCHES[@]}"
          for custom_pattern_branch  in "${BRANCHES[@]}"; do
              echo "in loop ${custom_pattern_branch}"

              echo "$( git branch --list -a  --format='%(refname:short)'  "origin/${custom_pattern_branch}" | sed "s/origin\///")" >> branches.txt
                 
          done 

          all_branches=branches.txt


          for branch in "${all_branches[@]}"; do
            is_pull_request=false
            if [ "$branch" != "master" ]; then
            
              git checkout "$branch"
              echo "before first merge" 
              merge_output=$(git merge --commit --no-ff --no-edit origin/master || {
                echo "conflict merge" 
                
                } )
              echo "after first merge : $merge_output" 
              echo "before  merge --abort" 
              git merge --abort ||  {
                echo "abort merge failed" 
                
                } 
                echo "after  merge --abort"  

              echo "before second merge" 
              git merge --no-commit --no-ff --no-edit origin/master || {
                git merge --abort
                conflicts_branches+="$branch"
                echo "Creating pull request for $branch"
                response=$(curl --request POST \
                  --url https://api.github.com/repos/$GITHUB_REPOSITORY/pulls \
                  --header 'authorization: Bearer ${{ secrets.PERSONAL_TOKEN }}' \
                  --header 'content-type: application/json' \
                  --data '{
                    "title": "Merge master into '"$branch"' (auto) '${GITHUB_SHA::8}'",
                    "body": "There were merge conflicts when attempting to merge changes from  into this branch. Please resolve the conflicts and merge the changes manually.",
                    "head": "master",
                    "base": "'"$branch"'"
                  }')
                   echo "response: $response"
                  
                 
                PR_URL+="• $branch : $(curl -H "Authorization: Bearer ${{ secrets.PERSONAL_TOKEN }}" \
                  "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls?head=master&base=$branch" \
                  | jq -r '.[0].html_url') \n"
                  echo "retrive PR:  $(curl -H "Authorization: Bearer ${{ secrets.PERSONAL_TOKEN }}" \
                    "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls?head=master&base=$branch" )"
                is_pull_request=true
                

              } 
               echo "after second merge" 
               echo "is_pull_request : $is_pull_request"

               echo "old merge_output : $merge_output"

               if [[ $merge_output == *"Already up to date."* ]]; then
                  
                  echo "up_to_date_braches : • $branch" 
                  up_to_date_braches+="• $branch \n"
               elif [ "$is_pull_request" = false ]; then
                   echo "merged successfully" 
                   git push origin "$branch"
                   commit_id=$(git log --oneline)
                   success_merge_braches+="• $branch : ${commit_id::8} \n"
              
               fi


            fi

          done

            echo "SUCCESS_BRANCHES=${success_merge_braches}" >> $GITHUB_ENV  

          if [ -n "${up_to_date_braches}" ]; then
            echo "UP_TO_DATE_BRANCHES=$(echo "already up to date success branches : \n ${up_to_date_braches}")" >> $GITHUB_ENV

          fi

          if [ -n "${success_merge_braches}" ]; then

            echo "SUCCESS_BRANCHES=$(echo "the updates were successfully merged into the following branches: \n ${success_merge_braches}")" >> $GITHUB_ENV

          fi


           echo "${PR_URL} \n -- ${conflicts_branches}"
          if [ -n "${PR_URL}" ]; then

            echo "Merge conflicts occurred in the following branches: ${conflicts_branches} \n ${PR_URL}"
            PR_URL="Merge conflicts occurred in the following branches: \n $PR_URL \n <@${Member_ID_Slack}>Please check the conflicts "
            echo "PR_URL=${PR_URL}" >> $GITHUB_ENV    
          else
            echo "No merge conflicts occurred."

          fi                                  




      - name: Send PRs  conflicts Urls  to Slack channel
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # This data can be any valid JSON from a previous step in the GitHub Action
          payload: |
            {
              "text": " This release is related to  ${{ env.REPOSITORY_NAME }} and includes updates that have been auto merged into multiple branches. \n${{  env.UP_TO_DATE_BRANCHES }}\n${{  env.SUCCESS_BRANCHES }} \n\n${{ env.PR_URL }} " 
            
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}   
