name: Merge master into all branches


on:
  push:
    branches:
      - master



jobs:
  merge:
    runs-on: ubuntu-latest
    env:
     BRANCHES: "main,main2,main3,add-app-spec,master2"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all history for all branches
          token: ${{ secrets.PERSONAL_TOKEN }}

      - name: Merge changes into other branches
        run: |
          git config user.name "dev3fyfy"
          git config user.email "dev.ahmed.afifi@gmail.com"
          conflicts_branches=""
          pull_request_url=""
          success_braches=""

          echo "REPOSITORY_NAME=$GITHUB_REPOSITORY" >> $GITHUB_ENV    


          IFS=',' read -ra BRANCHES <<< "${BRANCHES}"
          for branch in "${BRANCHES[@]}"; do
            if [ "$branch" != "master" ]; then
            
              git checkout "$branch"
              
              git merge --no-commit --no-ff --no-edit origin/master || {

                git merge --abort
                conflicts_branches+=("$branch")

                echo "Creating pull request for $branch"
                response=$(curl --request POST \
                  --url https://api.github.com/repos/$GITHUB_REPOSITORY/pulls \
                  --header 'authorization: Bearer ${{ secrets.PAT_AUTOMERGE }}' \
                  --header 'content-type: application/json' \
                  --data '{
                    "title": "Merge master into '"$branch"' (auto) '${GITHUB_SHA::8}'",
                    "body": "There were merge conflicts when attempting to merge changes from  into this branch. Please resolve the conflicts and merge the changes manually.",
                    "head": "master",
                    "base": "'"$branch"'"
                  }')
                  
 
                PR_URL+="$branch : $(curl -H "Authorization: Bearer ${{ secrets.PERSONAL_TOKEN }}" \
                  "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls?head=master&base=$branch" \
                  | jq -r '.[0].html_url') \n"

                

              }

              if [ -z "$(git status --porcelain)" ]; then
                git push origin "$branch"
              else
                git commit -am "Merge branch 'master' into $branch"
                git push origin "$branch"
                commit_id=$(git log --oneline)
                success_braches+="$branch : ${commit_id::8} /n"

              fi

            fi

          done

            echo "SUCCESS_BRANCHES=${success_braches}" >> $GITHUB_ENV    

          if [ ${#conflicts_branches[@]} -gt 0 ]; then
            echo "Merge conflicts occurred in the following branches: ${conflicts_branches[@]} \n ${PR_URL[@]}"
            echo "PR_URL=${PR_URL}" >> $GITHUB_ENV    
          else
            echo "No merge conflicts occurred."

          fi


      - name: Send PRs  conflicts Urls  to Slack channel
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # This data can be any valid JSON from a previous step in the GitHub Action
          payload: |
            {
              "text": " This release is related to ${{ env.REPOSITORY_NAME }} and includes updates that have been auto merged into multiple branches. \n\n  the updates were successfully merged into the following branches: \n${{  env.SUCCESS_BRANCHES }} \n\n there were  pull requests have been created to resolve the conflicts: \n${{ env.PR_URL }} " ,
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GitHub Action build result: <@U02F09BG9C2>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}   
      - name: Send Slack thread message
        run: |
          WEBHOOK_URL="${{ secrets.SLACK_WEBHOOK_URL }}"
          CHANNEL="#jenkins-pipeline"
          USERNAME="test"
          THREAD_MESSAGE="Hello @U02F09BG9C2 @user2! This is a test message."
          THREAD_TS=""
          # Build the payload JSON
          payload="{
            \"channel\": \"$CHANNEL\",
            \"username\": \"$USERNAME\",
            \"text\": \"\",
            \"blocks\": [
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"$THREAD_MESSAGE\"
                }
              }
            ]
          }"
          echo " Build the payload JSON"
          # Send the HTTP POST request to the webhook URL to start the thread
          response=$(curl -s -X POST -H 'Content-type: application/json' --data "$payload" "$WEBHOOK_URL")
          THREAD_TS=$(echo "$response" | jq -r '.ts')
          # Check the response
          if [[ $THREAD_TS != "null" ]]; then
            echo "Thread started successfully!"
          else
            echo "Failed to start thread. Error: $response"
            exit 1
          fi
          # Build the payload JSON for the reply within the thread
          reply_payload="{
            \"channel\": \"$CHANNEL\",
            \"username\": \"$USERNAME\",
            \"text\": \"\",
            \"thread_ts\": \"$THREAD_TS\",
            \"blocks\": [
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"Reply to the thread with mentions.  <@U02F09BG9C2> \"
                }
              }
            ]
          }"
          # Send the HTTP POST request to the webhook URL to reply within the thread
          reply_response=$(curl -s -X POST -H 'Content-type: application/json' --data "$reply_payload" "$WEBHOOK_URL")
          # Check the reply response
          if [[ $reply_response == "ok" ]]; then
            echo "Reply sent successfully!"
          else
            echo "Failed to send reply. Error: $reply_response"
     

